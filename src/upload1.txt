// import React, { useState, useRef, useEffect } from 'react';
// import jsPDF from 'jspdf';
// import ReactCrop from 'react-image-crop';
// import 'react-image-crop/dist/ReactCrop.css';
// import { FaCropSimple } from "react-icons/fa6";
// import { BsPencilFill } from "react-icons/bs";
// import { MdBrightness4 } from "react-icons/md";
// import { CgDarkMode } from "react-icons/cg";
// import './uploadImage.css';

// function ImageUploader() {
//   const [image, setImage] = useState(null);
//   const [isDrawing, setIsDrawing] = useState(false);
//   const [mode, setMode] = useState('normal');
//   const [saveFormat, setSaveFormat] = useState('png');
//   const [crop, setCrop] = useState({ aspect: 16 / 9 });
//   const [showCropper, setShowCropper] = useState(false);
//   const [output, setOutput] = useState(null);
//   const canvasRef = useRef(null);
//   const imageRef = useRef(null);
//   const cropImageRef = useRef(null);

//   const handleImageUpload = (e) => {
//     const file = e.target.files[0];
//     if (file) {
//       const imageURL = URL.createObjectURL(file);
//       setImage(imageURL);
//       setOutput(null);
//     }
//   };

//   useEffect(() => {
//     if (image && canvasRef.current && imageRef.current && !showCropper) {
//       const canvas = canvasRef.current;
//       const ctx = canvas.getContext('2d');
//       const img = imageRef.current;

//       img.onload = () => {
//         const desiredWidth = 600;
//         const desiredHeight = 300;
//         canvas.width = desiredWidth;
//         canvas.height = desiredHeight;
//         ctx.drawImage(img, 0, 0, desiredWidth, desiredHeight);
//       };
//     }
//   }, [image, showCropper]);

//   const handleMouseDown = (e) => {
//     if (mode === 'draw') {
//       setIsDrawing(true);
//       draw(e);
//     }
//   };

//   const handleMouseMove = (e) => {
//     if (isDrawing && mode === 'draw') {
//       draw(e);
//     }
//   };

//   const handleMouseUp = () => {
//     setIsDrawing(false);
//   };

//   const draw = (e) => {
//     const canvas = canvasRef.current;
//     const ctx = canvas.getContext('2d');
//     const rect = canvas.getBoundingClientRect();
//     ctx.lineWidth = 5;
//     ctx.lineCap = 'round';
//     ctx.strokeStyle = 'red';
//     ctx.lineTo(e.clientX - rect.left, e.clientY - rect.top);
//     ctx.stroke();
//     ctx.beginPath();
//     ctx.moveTo(e.clientX - rect.left, e.clientY - rect.top);
//   };

//   const applyFilter = (ctx, mode) => {
//     const imageData = ctx.getImageData(0, 0, canvasRef.current.width, canvasRef.current.height);
//     const data = imageData.data;
//     for (let i = 0; i < data.length; i += 4) {
//       if (mode === 'brightness') {
//         data[i] = Math.min(data[i] + 40, 255);
//         data[i + 1] = Math.min(data[i + 1] + 40, 255);
//         data[i + 2] = Math.min(data[i + 2] + 40, 255);
//       } else if (mode === 'dark') {
//         data[i] = Math.max(data[i] - 40, 0);
//         data[i + 1] = Math.max(data[i + 1] - 40, 0);
//         data[i + 2] = Math.max(data[i + 2] - 40, 0);
//       }
//     }
//     ctx.putImageData(imageData, 0, 0);
//   };

//   const handleFilter = (type) => {
//     if (!canvasRef.current) return;
//     const ctx = canvasRef.current.getContext('2d');
//     ctx.drawImage(imageRef.current, 0, 0, canvasRef.current.width, canvasRef.current.height);
//     applyFilter(ctx, type);
//     setMode(type);
//   };

//   const handleDraw = () => {
//     setMode('draw');
//   };

//   const cropImageNow = () => {
//     if (!cropImageRef.current) return;

//     const canvas = document.createElement('canvas');
//     const scaleX = cropImageRef.current.naturalWidth / cropImageRef.current.width;
//     const scaleY = cropImageRef.current.naturalHeight / cropImageRef.current.height;
//     const pixelRatio = window.devicePixelRatio;

//     canvas.width = crop.width * pixelRatio;
//     canvas.height = crop.height * pixelRatio;

//     const ctx = canvas.getContext('2d');
//     ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
//     ctx.imageSmoothingQuality = 'high';

//     ctx.drawImage(
//       cropImageRef.current,
//       crop.x * scaleX,
//       crop.y * scaleY,
//       crop.width * scaleX,
//       crop.height * scaleY,
//       0,
//       0,
//       crop.width,
//       crop.height,
//     );

//     const base64Image = canvas.toDataURL('image/jpeg');
//     setImage(base64Image);  // Set cropped image for main editor
//     setOutput(base64Image); // Show cropped preview
//     setShowCropper(false);  // Close cropper
//   };

//   const handleSave = () => {
//     if (!canvasRef.current) return;
//     if (saveFormat === 'pdf') {
//       const pdf = new jsPDF();
//       const canvas = canvasRef.current;
//       const imgData = canvas.toDataURL('image/png');
//       const pdfWidth = pdf.internal.pageSize.getWidth();
//       const pdfHeight = (canvas.height * pdfWidth) / canvas.width;
//       pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
//       pdf.save('edited-image.pdf');
//     } else {
//       const mimeType = `image/${saveFormat}`;
//       const link = document.createElement('a');
//       link.download = `edited-image.${saveFormat}`;
//       link.href = canvasRef.current.toDataURL(mimeType, saveFormat === 'jpeg' ? 0.95 : undefined);
//       link.click();
//     }
//   };

//   return (
//     <div className="uploader-container">
//       <h2>Upload and Edit Image</h2>
//       <input type="file" accept="image/*" onChange={handleImageUpload} />

//       {image && !showCropper && (
//         <div className="editor-container">
//           <div className="canvas-wrapper">
//             <img ref={imageRef} src={image} alt="Preview" style={{ display: 'none' }} />
//             <canvas
//               ref={canvasRef}
//               onMouseDown={handleMouseDown}
//               onMouseMove={handleMouseMove}
//               onMouseUp={handleMouseUp}
//             />
//           </div>

//           <div className="btn-container">
//             <button onClick={() => setShowCropper(true)}><FaCropSimple /></button>
//             <button onClick={() => handleFilter('brightness')}><MdBrightness4 /></button>
//             <button onClick={() => handleFilter('dark')}><CgDarkMode /></button>
//             <button onClick={handleDraw}><BsPencilFill /></button>
//           </div>

//           <div style={{ marginTop: 10 }}>
//             <label htmlFor="formatSelect">Save as: </label>
//             <select
//               id="formatSelect"
//               value={saveFormat}
//               onChange={e => setSaveFormat(e.target.value)}
//             >
//               <option value="png">PNG</option>
//               <option value="jpeg">JPEG</option>
//               <option value="webp">WEBP</option>
//               <option value="pdf">PDF</option>
//             </select>
//           </div>

//           <div className='save-btn' style={{ marginTop: 10 }}>
//             <button onClick={handleSave}>Save</button>
//           </div>
//         </div>
//       )}

//       {showCropper && image && (
//         <div style={{ textAlign: 'center' }}>
//           <h3>Crop Image</h3>
//           <ReactCrop
//             src={image}
//             crop={crop}
//             onChange={setCrop}
//             onImageLoaded={(img) => (cropImageRef.current = img)}
//           />
//           <button style={{ marginTop: 10 }} onClick={cropImageNow}>Crop</button>
//         </div>
//       )}

//       {output && (
//         <div style={{ marginTop: 20 }}>
//           <h4>Cropped Preview</h4>
//           <img src={output} alt="Cropped Output" style={{ maxWidth: '100%' }} />
//         </div>
//       )}
//     </div>
//   );
// }

// export default ImageUploader;